plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'com.google.dagger.hilt.android'
    id 'jacoco'
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ]))
}

android {
    compileSdkVersion 33
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "com.amb.twitterclone"
        minSdkVersion 21
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunner "com.amb.twitterclone.TestRunner"
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE*'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude("META-INF/*.kotlin_module")
    }
}

dependencies {
    def ktx = '1.9.0'
    def appCompat = "1.3.1"
    def material = "1.4.0"
    def constraintLayout = "2.1.0"
    def firebaseAuthKtx = "21.0.3"
    def coroutines = "1.3.9"
    def viewmodelKtx = "2.6.0-alpha02"
    def fragmentKtx = "1.5.1"
    def firebaseCore = "16.0.8"
    def firebaseStore = "18.2.0"
    def firebaseStorage = "16.1.0"
    def firebaseAuth = "16.2.1"
    def glide = "4.8.0"
    def hilt = "2.44"
    def mockk = "1.13.2"
    def coroutinesTest = '1.5.2'
    def coreTesting = "2.1.0"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "androidx.core:core-ktx:$ktx"
    implementation "androidx.appcompat:appcompat:$appCompat"
    implementation "com.google.android.material:material:$material"
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayout"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-play-services:$coroutines"

    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$viewmodelKtx"
    implementation "androidx.fragment:fragment-ktx:$fragmentKtx"

    implementation "com.google.firebase:firebase-auth-ktx:$firebaseAuthKtx"

    implementation "com.google.firebase:firebase-core:" + firebaseCore
    implementation "com.google.firebase:firebase-auth:" + firebaseAuth
    implementation "com.google.firebase:firebase-firestore:" + firebaseStore
    implementation "com.google.firebase:firebase-storage:" + firebaseStorage

    implementation "io.grpc:grpc-okhttp:1.32.2"
    implementation "com.android.support:multidex:1.0.3"

    implementation "com.github.bumptech.glide:glide:$glide"
    annotationProcessor "com.github.bumptech.glide:compiler:$glide"

    implementation "com.google.dagger:hilt-android:$hilt"
    kapt "com.google.dagger:hilt-android-testing:$hilt"
    kapt "com.google.dagger:hilt-compiler:$hilt"

    testImplementation "junit:junit:4.+"
    testImplementation "io.mockk:mockk:$mockk"
    testImplementation "androidx.arch.core:core-testing:" + coreTesting
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:' + coroutinesTest
    kaptTest "com.google.dagger:hilt-android-compiler:$hilt"

    androidTestImplementation "androidx.test.ext:junit:1.1.3"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.4.0"
    androidTestImplementation 'androidx.test:core-ktx:1.1.0'
    androidTestImplementation "io.mockk:mockk-android:$mockk"
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hilt"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$hilt"
}

kapt {
    correctErrorTypes true
}

apply plugin: 'com.google.gms.google-services'